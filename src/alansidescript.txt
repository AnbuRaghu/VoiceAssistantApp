// Use this sample to create your own voice commands
intent('What does this app do?','What can i do here',
      reply('This is news project'))

const API_KEY='7a9d139ba44c47b1a04550b9f1101dd8'
let savedArticles=[]
//News by Source Api endpoint
intent('Give me the news from $(source* (.*))',(p)=>{
    let NEWS_API_URL=`https://newsapi.org/v2/top-headlines?apiKey=${API_KEY}`;
    if(p.source.value){
        // to make the source like this bbc-news
        NEWS_API_URL=`${NEWS_API_URL}&sources=${p.source.value.toLowerCase().split(' ').join('-')}`
    }
    //built in alan function // we get request obj
    api.request(NEWS_API_URL,(error,response,body)=>{
        const{articles}=JSON.parse(body)
        if(!articles.length){
            p.play('Sorry, please try searching for news from a different source')
            return;
        }
        savedArticles=articles
        //name of the command is newHeadlines and it accepts articles as argument
        p.play({command:'newsHeadlines',articles})
        p.play(`Here are the (latest|recent) ${p.source.value}news`)
         p.play('Would you like me to read the headlines?')
        //here we call the context
        p.then(confirmation)
       
        
        
    })
        
})
// news by terms
intent('What\'s up with $(term* (.*))',(p)=>{
    let NEWS_API_URL=`https://newsapi.org/v2/everything?apiKey=${API_KEY}`;
    if(p.term.value){
        // to make the source like this bbc-news
        NEWS_API_URL=`${NEWS_API_URL}&q=${p.term.value}`
    }
    //built in alan function // we get request obj
    api.request(NEWS_API_URL,(error,response,body)=>{
        const{articles}=JSON.parse(body)
        if(!articles.length){
            p.play('Sorry, please try searching for something else')
            return;
        }
        savedArticles=articles
        //name of the command is newHeadlines and it accepts articles as argument
        p.play({command:'newsHeadlines',articles})
        p.play(`Here are the (latest|recent)  articles on ${p.term.value}.`)
        
         p.play('Would you like me to read the headlines?')
        //here we call the ccontext
        p.then(confirmation)
       
        
        
    })
        
})

//news by Category

const CATEGORIES = ['business', 'entertainment', 'general', 'health', 'science', 'sports', 'technology'];
const CATEGORIES_INTENT = `${CATEGORIES.map((category) => `${category}~${category}`).join('|')}|`;
intent(`(show|what is|tell me|what's|what are|what're|read) (the|) (recent|latest|) $(N news|headlines) (in|about|on|) $(C~ ${CATEGORIES_INTENT})`,
  `(read|show|get|bring me|give me) (the|) (recent|latest) $(C~ ${CATEGORIES_INTENT}) $(N news|headlines)`, (p) => {
 
    let NEWS_API_URL=`https://newsapi.org/v2/top-headlines?apiKey=${API_KEY}&country=uk`;
    // let NEWS_API_URL=`https://newsapi.org/v2/top-headlines?apiKey=${API_KEY}`;
    if(p.C.value){
        // to make the source like this bbc-news
        NEWS_API_URL=`${NEWS_API_URL}&category=${p.C.value}`
    }
    //built in alan function // we get request obj
    api.request(NEWS_API_URL,(error,response,body)=>{
        const{articles}=JSON.parse(body)
        if(!articles.length){
            p.play('Sorry, please try searching for a different category')
            return;
        }
        savedArticles=articles
        //name of the command is newHeadlines and it accepts articles as argument
        p.play({command:'newsHeadlines',articles})
         if(p.C.value){
              p.play(`Here are the (latest|recent) articles on ${p.C.value}.`)
    
       
    }else{
         p.play(`Here are the (latest|recent)news`)
        
    }
        p.play('Would you like me to read the headlines?')
        //here we call the ccontext
        p.then(confirmation)
       
        
    })
        
})

const confirmation=context(()=>{
    intent('yes',async (p)=>{
       for(let i=0;i < savedArticles.length;i++ ){
           p.play({command:'highlight',article:savedArticles[i]});
           p.play(`${savedArticles[i].title}`);
       } 
    })
     intent('no',(p)=>{
         p.play('Sure, sounds good to me')
        
    })
})
//(the|) by circling it in ( we say ignore or skip if user doesnt say the word)
intent('Open(the|) (article|) (number|) $(number* (.*))',(p)=>{
    if (p.number.value){
        p.play({command:'open',number:p.number.value,articles:savedArticles})
    }
})
intent('(go|) back',(p)=>{
    p.play('Sure going back');
    //here we set the article to empty
    p.play({command:'newsHeadlines',articles:[]})
})